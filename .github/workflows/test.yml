name: Notify Teams on PR

on:
#  push:
#    branches: main
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Get PR Author Details
        id: get-user-details
        shell: pwsh
        run: |
          $userResponse = Invoke-RestMethod -Uri "https://api.github.com/users/${{ github.event.pull_request.user.login }}" -Headers @{ Authorization = "token ${{ secrets.GITHUB_TOKEN }}" }
          $name = $userResponse.name
          $email = $userResponse.email
          echo "name=$name" >> $env:GITHUB_ENV
          echo "email=$email" >> $env:GITHUB_ENV
          echo $name
          echo $email

      - name: Get PR Reviewers
        id: get-reviewers
        shell: pwsh
        run: |
          $prUrl = "${{ github.event.pull_request.url }}"  # Use the API URL, not the HTML URL
          $reviewersResponse = Invoke-RestMethod -Uri "$prUrl/requested_reviewers" -Headers @{ Authorization = "token ${{ secrets.GITHUB_TOKEN }}" }
          $reviewers = $reviewersResponse.users.login -join ', '  # Joining reviewers into a string
          echo "reviewers=$reviewers" >> $env:GITHUB_ENV
          echo $reviewers

      - name: Get PR Reviewers githubevent
        run: |
          $reviewers = @()
          $reviewerInfo = "${{ tojson(github.event.pull_request.requested_reviewers) }}"
          $reviewersArray = $reviewerInfo | ConvertFrom-Json
  
          foreach ($reviewer in $reviewersArray) {
            $reviewers += $reviewer.login
          }
  
          if ($reviewers.Count -eq 0) {
            Write-Output "No reviewers have been requested."
          } else {
            $reviewersList = $reviewers -join ", "
            Write-Output "Reviewers: $reviewersList"
          }

      - name: Send PR Notification to Teams
        shell: pwsh
        run: |
          $prUrl = "${{ github.event.pull_request.html_url }}"
          $prTitle = "${{ github.event.pull_request.title }}"
          $prAuthor = "${{ github.event.pull_request.user.login }}"
          $prAuthorName = "${{ env.name }}"
          $prAuthorEmail = "${{ env.email }}"
          $prReviewers = "${{ env.reviewers }}"
          $webhookUrl = "YOUR_TEAMS_WEBHOOK_URL"          
          $prAuthorInfo = if ($prAuthorName -and $prAuthorEmail) { "$prAuthorName <$prAuthorEmail>" } else { $prAuthor }
          echo "A new pull request titled `'$prTitle'` has been opened by $prAuthorInfo. Reviewers: $prReviewers. [View PR]($prUrl)"
          Invoke-RestMethod -Uri $webhookUrl -Method Post -ContentType 'application/json' -Body (@{
              title = "New Pull Request Opened"
              text  = "A new pull request titled `'$prTitle'` has been opened by $prAuthorInfo. Reviewers: $prReviewers. [View PR]($prUrl)"
          } | ConvertTo-Json)
          
          {
            "type": "message",
            "attachments": [
              {
                "contentType": "application/vnd.microsoft.card.adaptive",
                "content": {
                  "$schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                  "type": "AdaptiveCard",
                  "version": "1.3",
                  "body": [
                    {
                      "type": "TextBlock",
                      "text": "This message was sent via a webhook."
                    }
                  ],
                  "actions": [
                    {
                      "type": "Action.Submit",
                      "title": "Mark as Viewed",
                      "data": {
                        "action": "viewed"
                      }
                    }
                  ]
                }
              }
            ]
          }

